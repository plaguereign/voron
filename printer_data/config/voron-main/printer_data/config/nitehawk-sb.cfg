# This file contains pin mappings for the LDO Nitehawk-SB Toolboard
# To use this config, the firmware should be compiled for the Raspberry Pi RP2040
# Make sure to include this config *at the end* of printer.cfg to overwrite the relevent sections

# See https://docs.ldomotors.com/en/voron/nitehawk-sb#firmware-setup-and-update
# For instructions on uploading/updating klipper firmware to the PCB

## LDO Nitehawk-SB Toolboard Partial Config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                            [mcu] section
## Thermistor types                     [extruder] sections

## *MAKE SURE* to include this partial config file *AFTER* the main controller config. 
## This will ensure the relavent sections are overwritten by the pin mappings specified here.

[mcu nhk]
##  Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_rp2040_4E363334320E335F-if00
restart_method: command
##--------------------------------------------------------------------

#####################################################################
#   Endstops
#####################################################################

## XES - Toolhead PCB
[stepper_x]
endstop_pin: nhk:gpio13

## YES - Toolhead PCB
[stepper_y]
endstop_pin: nhk:gpio12

#####################################################################
# 	Extruder
#####################################################################
[extruder]
step_pin: nhk:gpio23
dir_pin: !nhk:gpio24
enable_pin: !nhk:gpio25
heater_pin: nhk:gpio9
sensor_pin: nhk:gpio29
sensor_type: PT1000 #ATC Semitec 104NT-4-R025H42G
pullup_resistor: 2200
#rotation_distance: 3.99

rotation_distance: 22.7585 #Nebula 51.75
gear_ratio: 50:10
max_extrude_only_distance: 200.0

#step_distance: 0.04
#extruder_type: direct
#gear_ratio: 44:10, 37:17
microsteps: 16
#full_steps_per_rotation: 200
#run_current: 0.5 # Adjust as needed
#hold_current: 0.2 # Or 0.5 if you want to hold all the time
#rotation_distance: 4.637 #stealth burner 22.7585          
#gear_ratio: 50:10                  
#microsteps: 16                      
#full_steps_per_rotation: 200        
nozzle_diameter: 0.400              
filament_diameter: 1.75 
min_temp: 0
max_temp: 300
control = pid
#pid_Kp=28.870
#pid_Ki=3.007
#pid_Kd=69.290
pid_Kp=15.870
pid_Ki=0.664 
pid_Kd=94.825
step_pulse_duration: 0.000004 
max_extrude_cross_section: 5 
max_extrude_only_distance: 400

[tmc2209 extruder]
sense_resistor: 0.100
uart_pin: nhk:gpio0
tx_pin: nhk:gpio1
interpolate: false
run_current: 0.80

#####################################################################
#   Fans
#####################################################################
## PCF
[fan]
#pin: nhk:gpio6
pin: PF7
max_power: 0.8 

# This should be set to 0.8 on most motherboards to give full range of control to your slicer. 

# Anything above 80% duty cycle will be full power on this particular brushless driver.

# To fine-tune the max_power parameter for your particular motherboard, set max_power to 1.0, go into the Klipper dashboard, and increase fan speed 1% at a time until the actual fan speed stops increasing as you increase the fan speed. Divide the fan speed at this point by 100 and enter it into the max_power parameter.

# This parameter defines the maximum power (expressed as a value from 0.0 to 1.0) that the pin may be set to. 

# The value 1.0 allows the pin to be set fully enabled for extended periods, while a value of 0.5 would allow the pin to be enabled for no more than half the time. 

# This setting may be used to limit the total power output (over extended periods) to the fan. 

# If this value is less than 1.0, then fan speed requests will be scaled between zero and max_power (for example, if max_power is 0.9 and a fan speed of 80% is requested, then the fan power will be set to 72%).

shutdown_speed: 0 

# The desired fan speed (expressed as a value from 0.0 to 1.0) if 

# The microcontroller software enters an error state. 

# The default is 0.

cycle_time: 0.005 

# The amount of time (in seconds) for each PWM power cycle to the fan. 

# It is recommended this be 10 milliseconds or greater when using software-based PWM. 

# The default is 0.010 seconds.

hardware_pwm: False 

# Enable this to use hardware PWM instead of software PWM. 

# Most fans do not work well with hardware PWM, so it is not recommended to enable this unless there is an electrical requirement to switch at very high speeds. 

# When using hardware PWM, the actual cycle time is constrained by the implementation and may be significantly different than the requested cycle_time. 

# The default is False.

kick_start_time: 0.100 

# Time (in seconds) to run the fan at full speed when either first enabling or increasing it by more than 50% (helps get the fan spinning). 

# The default is 0.100 seconds.

off_below: 0.1 

# The blower will not spin with the included brushless driver when the duty cycle is below 8%. When scaled with Max_power at 0.8, the off_below parameter should be set to 0.1. 

# To calibrate this setting, gradually lower the fan speed to determine the lowest input speed that reliably drives the fan without stalls. 

# Set off_below to the duty cycle corresponding to this value (for example, 8% -> 0.08/Max_power -> 0.08/0.8 -> 0.1) or slightly higher. 

# This parameter is the minimum input speed that will power the fan (expressed as a value from 0.0 to 1.0). 

# When a speed lower than off_below is requested, the fan will instead be turned off. 

# This setting may be used to prevent fan stalls and to ensure effective kick starts. 

# To calibrate this setting, start with off_below set to 0.0 and the fan spinning. 

# Gradually lower the fan speed to determine the lowest input speed that reliably drives the fan without stalls. 

# Set off_below to the duty cycle corresponding to this value (for example, 12% -> 0.12) or slightly higher.

#Tachometer_pin:

# Tachometer input pin for monitoring fan speed. A pullup is generally required. 

# This parameter is optional.

#Tachometer_ppr: 1

# When tachometer_pin is specified, this is the number of pulses per revolution of the tachometer signal.

#Tachometer_poll_interval: 0.0005

# When tachometer_pin is specified, this is the polling period of the tachometer pin, in seconds. 

# The default is 0.0015, which is fast enough for fans below 10,000 RPM at 2 PPR. 

# This must be smaller than 30/(tachometer_ppr*rpm), with some margin, where rpm is the 

# maximum speed (in RPM) of the fan.
#tachometer_pin: nhk:gpio17
#tachometer_ppr: 2

## HEF
[heater_fan hotend_fan]
pin: nhk:gpio5
#tachometer_pin: nhk:gpio16
#tachometer_ppr: 2

#####################################################################
# 	Probe
#####################################################################
## Probe Port
#[probe]
#pin: nhk:gpio10

#####################################################################
#   Lights
#####################################################################
## Stealthburner Headlights
[neopixel headlight]
pin: nhk:gpio7

## PCB Activity Light
[output_pin act_led]
pin: !nhk:gpio8

#####################################################################
#   Accelerometer
#####################################################################
[adxl345]
cs_pin: nhk:gpio21
spi_software_sclk_pin: nhk:gpio18
spi_software_mosi_pin: nhk:gpio20
spi_software_miso_pin: nhk:gpio19

[resonance_tester]
accel_chip: adxl345
##--------------------------------------------------------------------
## Uncomment below for 250mm build
#probe_points:
#    125, 125, 20

## Uncomment below for 300mm build
#probe_points:
#    155, 155, 20

## Uncomment below for 350mm build
probe_points:
    175, 175, 20

##--------------------------------------------------------------------
[input_shaper]
shaper_freq_x: 39
shaper_type_x: 2hump_ei
shaper_freq_y: 39
shaper_type_y: 2hump_ei

#####################################################################
#   Thermistors
# #####################################################################
## External Chamber Thermistor Port
#[temperature_sensor chamber_temp]
#sensor_type: Generic 3950
#sensor_pin: nhk:gpio28
#min_temp: 0
#max_temp: 100
#gcode_id: chamber_th

[thermistor CMFB103F3950FANT]
temperature1: 0.0
resistance1: 32116.0
temperature2: 40.0
resistance2: 5309.0
temperature3: 80.0
resistance3: 1228.0

[temperature_sensor chamber]
## Nitehawk PCB Sensor
sensor_type: temperature_mcu
#sensor_pin: nhk:gpio26
#pullup_resistor: 2200
sensor_mcu: nhk
min_temp: 0
max_temp: 100
gcode_id: chamber

#####################################################################
#   Filament Sensor
#####################################################################
#[filament_switch_sensor toolhead_sensor]
#switch_pin: nhk:gpio3
#pause_on_runout: False

